# A description of convection in a 2d box. See the manual for more information.


# At the top, we define the number of space dimensions we would like to
# work in:
set Dimension                              = 2

# There are several global variables that have to do with what
# time system we want to work in and what the end time is. We
# also designate an output directory.
set Use years in output instead of seconds = true
set End time                               = 30e6 #Time steps
set Output directory                       = /home/npysklyw/scratch/Aspect_Code/output-2d-drip-experiment-simplermat #Edit this directory so we can test out various different things
set CFL number = 0.5

# Then there are variables that describe how the pressure should
# be normalized. Here, we choose a zero average pressure
# at the surface of the domain (for the current geometry, the
# surface is defined as the top boundary).
set Pressure normalization                 = surface
set Surface pressure                       = 0


# Then come a number of sections that deal with the setup
# of the problem to solve. The first one deals with the
# geometry of the domain within which we want to solve.
# The sections that follow all have the same basic setup
# where we select the name of a particular model (here,
# the box geometry) and then, in a further subsection,
# set the parameters that are specific to this particular
# model.
subsection Geometry model
  set Model name = box

  subsection Box
    set X repetitions = 4
    set Y repetitions = 4
    set X extent = 1200e3
    set Y extent = 1167e3
  end
end

subsection Compositional fields
  set Number of fields = 3
  set Names of fields = uppercrust, lithosphere, astheno
end

# The next section deals with the initial conditions for the
# temperature (there are no initial conditions for the
# velocity variable since the velocity is assumed to always
# be in a static equilibrium with the temperature field).
# There are a number of models with the 'function' model
# a generic one that allows us to enter the actual initial
# conditions in the form of a formula that can contain
# constants. We choose a linear temperature profile that
# matches the boundary conditions defined below plus
# a small perturbation:
# subsection Initial temperature model
#   set Model name = function

#   subsection Function
#     set Variable names      = x,z
#     set Function constants  = p=0.01, L=1, pi=3.1415926536, k=1
#     set Function expression = (1.0-z) - p*cos(k*pi*x/L)*sin(pi*z)
#   end
# end


# Then follows a section that describes the boundary conditions
# for the temperature. The model we choose is called 'box' and
# allows to set a constant temperature on each of the four sides
# of the box geometry. In our case, we choose something that is
# heated from below and cooled from above, whereas all other
# parts of the boundary are insulated (i.e., no heat flux through
# these boundaries; this is also often used to specify symmetry
# boundaries).
# subsection Boundary temperature model
#   set Fixed temperature boundary indicators   = bottom, top
#   set List of model names = box
#   subsection Box
#     set Bottom temperature = 1727.8
#     set Top temperature    =  273
#   end
# end

# subsection Initial temperature model
#   set Model name = function
#   subsection Function
#     set Variable names = x, y
#     set Function constants = h=1167e3,ts1=273,ts2=681.5714,ts3=823.,ts4=1573., \
#                                      k1=2.5,k2=2.5,k3=3.3,k4=39.25,A=1.5e-6, \
#                              qs1=0.0653571,qs2=0.035357,qs3=0.0275,qb3=0.01265823

#     set Function expression = if( (h-y)<=20.e3, \
#                                   373, \
#                                   if((h-y)>20.e3 && (h-y)<=30.e3, 573,\
#                 if((h-y)>30.e3 && (h-y)<=120.e3, 873, \
#                         1623)));                              
#   end
# end


# The next parameters then describe on which parts of the
# boundary we prescribe a zero or nonzero velocity and
# on which parts the flow is allowed to be tangential.
# Here, all four sides of the box allow tangential
# unrestricted flow but with a zero normal component:
subsection Boundary velocity model
  set Tangential velocity boundary indicators = left, right, bottom, top
end

# The following two sections describe first the
# direction (vertical) and magnitude of gravity and the
# material model (i.e., density, viscosity, etc). We have
# discussed the settings used here in the introduction to
# this cookbook in the manual already.
subsection Gravity model
  set Model name = vertical

  subsection Vertical
    set Magnitude = 10  # = Ra
  end
end


# subsection Material model
#   set Model name = simple

#   subsection Simple model
#     set Reference density             = 1
#     set Reference specific heat       = 1
#     set Reference temperature         = 0
#     set Thermal conductivity          = 1
#     set Thermal expansion coefficient = 1
#     set Viscosity                     = 1
#   end
# end


#Material model
# The rheological setup of these models closely follows that of Naliboff and Buiter (2015). 
# Table DR1 outlines the rheological parameters used for the different compositional layers. 
# The upper crust implements a wet quartzite flow law (Rutter and Brodie, 2004), lower crust applies wet anorthite (Rybacki et al., 2006), and the mantle dry olivine (Hirth and Kohlstedt, 2004). 
# All the viscous pre-factors described in Table DR1 are scaled to plane strain from unixial strain experiments. 
# Rheology: Non-linear viscous flow and Drucker Prager Plasticity
# Values for most rheological parameters are specified for a background material and
# each compositional field.  Values for viscous deformation are based on dislocation
# creep flow-laws, with distinct values for the upper crust (wet quartzite), lower
# crust (wet anorthite) and mantle (dry olivine).  

subsection Material model
  set Model name = multicomponent

  subsection Multicomponent
    set Densities             =        3333,        3333,        3200,         3100
    set Thermal expansivities =        2e-5, 2e-5,        2e-5,         2e-5

    set Viscosities = 1e21,1e21,1.59e21,1e21


  end
end

subsection Initial composition model
  set Model name = function
  subsection Function
    set Variable names      = x,z

    set Function expression =  if(z<1167.e3 && z>=1155.e3, 1, 0);if(z<1155.e3 && z>=1035.e3,1, 0) || if(z>950e3 && z <= 1050e3,if(x>500e3 && x < 600e3,1,0),0); if(z>=0 && z <1035.e3, 1, 0)

end
end

# Composition boundary conditions
subsection Boundary composition model
  set Model name = initial composition
end


# We also have to specify that we want to use the Boussinesq
# approximation (assuming the density in the temperature
# equation to be constant, and incompressibility).
subsection Formulation
  set Formulation = Boussinesq approximation
end


# The settings above all pertain to the description of the
# continuous partial differential equations we want to solve.
# The following section deals with the discretization of
# this problem, namely the kind of mesh we want to compute
# on. We here use a globally refined mesh without
# adaptive mesh refinement.
subsection Mesh refinement
  set Initial global refinement                = 4
  set Initial adaptive refinement              = 0
  set Time steps between mesh refinement       = 0
end


# The final part is to specify what ASPECT should do with the
# solution once computed at the end of every time step. The
# process of evaluating the solution is called `postprocessing'
# and we choose to compute velocity and temperature statistics,
# statistics about the heat flux through the boundaries of the
# domain, and to generate graphical output files for later
# visualization. These output files are created every time
# a time step crosses time points separated by 0.01. Given
# our start time (zero) and final time (0.5) this means that
# we will obtain 50 output files.
subsection Postprocess
  set List of postprocessors = velocity statistics, heat flux statistics, visualization

  subsection Visualization
    set Time between graphical output = 0.01
  end
end

subsection Solver parameters
  set Temperature solver tolerance = 1e-10
end


